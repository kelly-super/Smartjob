<form id="create-quote-form">
<div class="container">
  <!-- Top Section: Client Selection or Add New Client -->
  <div class="mb-4">
    <h4>Select or Add Client</h4>
    <div class="mb-3">

      <input type="text" class="form-control" id="client_search" placeholder="Search for clients by name">
      <div id="client_list" class="list-group" style="display: none;">
        <!-- Client options will be dynamically populated here -->
      </div>
      <input type="hidden" id="client_id" name="client_id">
      <input type="hidden" id="client_name" name="client_name">
    </div>
    <button type="button" id="add_client_btn" class="btn btn-secondary">Add New Client</button>

    <!-- Display Selected Client Information -->
    <div id="selected_client_display" class="mt-3" style="display: none;">
      <h5>Selected Client Information</h5>
      <p><strong>Name:</strong> <span id="display_client_name"></span></p>
      <p><strong>Mobile:</strong> <span id="display_client_mobile"></span></p>
      <p><strong>Email:</strong> <span id="display_client_email"></span></p>
      <p><strong>Address:</strong> <span id="display_client_address"></span></p>
    </div>
  </div>

  <!-- Bottom Section: Product List -->
  <div class="mb-4">
    <h4>Service List</h4>
    <button type="button" id="add_item_btn" class="btn btn-primary mb-3">Add an Item</button>
    <table class="table table-striped">
      <thead>
        <tr>
          <tr>
            <th>Item Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Discount</th>
            <th>Remark</th>
            <th>Action</th>
          </tr>
        </tr>
      </thead>
      <tbody id="product_list">
        <!-- Product rows will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <div>

    <h2>Total</h2>
      <p>Total Amount: <span id="total_amount">0.00</span></p>
      <p>GST (15%): <span id="gst_amount">0.00</span></p>
      <p>Final Price: <span id="final_price">0.00</span></p>
  </div>
  <!-- Submit Button -->
  <button type="submit" id="submit_quote_button" class="btn btn-success">Create Quote</button>
  <button type="button" id="view_previous" class="btn btn-success">View Previous Quote</button>
</div>
</form>
<!-- Add New Client Modal -->
<div class="modal fade" id="addClientModal" tabindex="-1" aria-labelledby="addClientModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addClientModalLabel">Add New Client</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="add_client_form">
          <div class="mb-3">
            <label for="client_lastname" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="client_lastname" name="client_lastname" required>
          </div>
          <div class="mb-3">
            <label for="client_surname" class="form-label">Surname</label>
            <input type="text" class="form-control" id="client_surname" name="client_surname">
          </div>
          <div class="mb-3">
            <label for="client_mobile" class="form-label">Mobile</label>
            <input type="text" class="form-control" id="client_mobile" name="client_mobile">
          </div>
          <div class="mb-3">
            <label for="client_email" class="form-label">Email</label>
            <input type="email" class="form-control" id="client_email" name="client_email">
          </div>
          <div class="mb-3">
            <label for="client_address" class="form-label">Address</label>
            <input type="text" class="form-control" id="client_address" name="client_address">
          </div>
          <button type="submit" class="btn btn-primary">Save Client</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript for Functionality -->


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const clientSearch = document.getElementById('client_search');
    const clientList = document.getElementById('client_list');
    const clientIdInput = document.getElementById('client_id');
    const clientNameInput = document.getElementById('client_name');
    const selectedClientDisplay = document.getElementById('selected_client_display');
    const addClientBtn = document.getElementById('add_client_btn');
    const addClientModal = new bootstrap.Modal(document.getElementById('addClientModal'));
    const addClientForm = document.getElementById('add_client_form');
    const addItemBtn = document.getElementById('add_item_btn');
    const productList = document.getElementById('product_list');
    const submitQuoteButton = document.getElementById('submit_quote_button');
    const createQuoteForm = document.getElementById('create-quote-form');

    createQuoteForm.addEventListener('submit', function (e) {
      e.preventDefault();
      submitQuoteButton.disabled = true;
      submitQuoteButton.textContent = 'Creating...';
    
      // Collect data from dynamic item rows
      const itemRows = productList.querySelectorAll('tr');
      const itemList = [];
      itemRows.forEach(row => {
        const item = {
          name: row.querySelector('.item_name').value,
          description: row.querySelector('.item_description').value,
          price: row.querySelector('.item_price').value,
          discount: row.querySelector('.item_discount_price').value,
          remark: row.querySelector('.remark').value,
        };
        itemList.push(item);
      });
    
      // Convert itemList to a JSON string
      const data = {
        client_id: clientIdInput.value,
        client_name: clientNameInput.value,
        quote_property_address: document.getElementById('display_client_address').value,
        contact_number: document.getElementById('display_client_mobile').value,
        contact_email: document.getElementById('display_client_email').value,
        quote_price: document.getElementById('final_price').value,
        item_list: JSON.stringify(itemList), // Send as JSON string
      };
    
      // Send the data to the server
      fetch('/quotes/createQuote', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            alert('Quote created successfully!');
            window.location.href = `/quotes/${result.quoteId}`;
          } else {
            alert('Error creating quote: ' + result.message);
          }
        })
        .catch(error => {
          console.log('Error:', error);
          alert('An error occurred while creating the quote.');
        })
        .finally(() => {
          submitQuoteButton.disabled = false;
          submitQuoteButton.textContent = 'Create Quote';
        });
    });
    // Fetch clients from the server
    function fetchClients(query) {
      fetch(`/clients/search?q=${query}`)
        .then(response => response.json())
        .then(data => {
          clientList.innerHTML = '';
          data.forEach(client => {
            const option = document.createElement('div');
            option.className = 'list-group-item list-group-item-action';
            option.textContent = `${client.client_surname} ${client.client_lastname} (${client.client_id})`;
            option.addEventListener('click', () => {
              clientIdInput.value = client.client_id;
              clientNameInput.value = `${client.client_surname} ${client.client_lastname}`;
              document.getElementById('display_client_name').textContent = `${client.client_surname} ${client.client_lastname}`;
              document.getElementById('display_client_mobile').textContent = client.client_mobile;
              document.getElementById('display_client_email').textContent = client.client_email;
              document.getElementById('display_client_address').textContent = client.client_address;
              selectedClientDisplay.style.display = 'block';
              clientSearch.value = '';
              clientList.style.display = 'none';
            });
            clientList.appendChild(option);
          });
          clientList.style.display = 'block';
        });
    }

    // Add new client
    addClientForm.addEventListener('submit', function (e) {
      e.preventDefault();
      const formData = new FormData(this);

      // Log form data for debugging
      for (const [key, value] of formData.entries()) {
        console.log(`${key}: ${value}`);
      }

      fetch('/clients/create', {
        method: 'POST',
        body: new URLSearchParams(new FormData(addClientForm))//Convert FormData to URL-encoded format
      })
        .then(response => response.json())
        .then(data => {
          addClientModal.hide();
          fetchClients(''); // Refresh client list
        }).catch(error => {
          console.error('Error adding client:', error);
        });
    });

    // Add item row
    add_item_btn.addEventListener('click', function () {
      const row = document.createElement('tr');
      row.innerHTML = `
      <td><input type="text" class="form-control item_name" name="item_name"></td>
      <td><input type="text" class="form-control item_description" name="item_description" ></td>
      <td><input type="number" class="form-control item_price" name="item_price" ></td>
      <td><input type="number" class="form-control item_discount_price" name="item_discount_price" ></td>
      <td><input type="text" class="form-control remark" name="remark"></td>
      <td><button class="btn btn-danger btn-sm" onclick="this.closest('tr').remove()">Delete</button></td>
    `;
      productList.appendChild(row);
     
    });



    // Event listener for client search input
    clientSearch.addEventListener('input', function () {
      const query = this.value.trim();
      if (query.length > 2) {
        fetchClients(query);
      } else {
        clientList.style.display = 'none';
      }
    });

    // Event listener for add client button
    addClientBtn.addEventListener('click', function () {
      addClientModal.show();
    });

   // Add event listeners for price and discount inputs
  productList.addEventListener('input', function (e) {
    if (e.target.classList.contains('item_price') || e.target.classList.contains('item_discount_price')) {
      calculateTotal();
    }
  });

  // Calculate total, GST, and final price
  function calculateTotal() {
    let total = 0;
    const rows = productList.querySelectorAll('tr');
    rows.forEach(row => {
      const price = parseFloat(row.querySelector('.item_price').value) || 0;
      const discount = parseFloat(row.querySelector('.item_discount_price').value) || 0;
      total += (price - discount);
    });

    const gst = total * 0.15;
    const finalPrice = total + gst;

    document.getElementById('total_amount').textContent = total.toFixed(2);
    document.getElementById('gst_amount').textContent = gst.toFixed(2);
    document.getElementById('final_price').textContent = finalPrice.toFixed(2);
  }

  const viewPreviousBtn = document.getElementById('view_previous');
  viewPreviousBtn.addEventListener('click', function () {
    // Open the PDF in a new tab
    window.open('/generate-pdf', '_blank');
  });


  });
</script>